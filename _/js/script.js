// Generated by CoffeeScript 1.3.3
(function() {
  var Presenter, presenter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  Presenter = (function() {

    function Presenter() {
      this.keyEventHandler = __bind(this.keyEventHandler, this);

    }

    Presenter.prototype.status = {};

    Presenter.prototype.init = function() {
      var _this = this;
      this.generateNav();
      this.listenForKeyEvents();
      $(window).bind("hashchange", function(e) {
        return _this.router(e);
      });
      $(".nav-item-presentation").click(function(e) {
        var href;
        e.preventDefault();
        href = $(e.target).attr("href");
        $('.header-icon-menu').click();
        _this.status = {};
        return $.bbq.pushState({
          p: href.substr(1)
        });
      });
      $(".nav-item-viewport").click(function(e) {
        e.preventDefault();
        return $.bbq.pushState({
          v: $(this).attr("id")
        });
      });
      $(".header-icon-settings").click(function(e) {
        e.preventDefault();
        log("called");
        $('.header-icon-menu').click();
        return $('#settings-popover').addClass('popover-visible');
      });
      $(".nav-item-home").click(function(e) {
        e.preventDefault();
        $.bbq.removeState();
        return _this.newMenuStatus();
      });
      $(".header-icon-menu").click(function(e) {
        e.preventDefault();
        return _this.newMenuStatus();
      });
      $(".header-icon-close").click(function(e) {
        e.preventDefault();
        return $(this).parent().removeClass('popover-visible nav-visible');
      });
      return $(window).trigger("hashchange");
    };

    Presenter.prototype.makeViewportNormal = function() {
      return $('.horizontal-carousel').css({
        'width': '100%',
        'left': "0px",
        'margin-left': "0px"
      }).removeClass('horizontal-carousel-sized');
    };

    Presenter.prototype.makeViewportMini = function() {
      return $('.horizontal-carousel').css({
        'width': '480px',
        'left': "50%",
        'margin-left': "-240px"
      }).addClass('horizontal-carousel-sized');
    };

    Presenter.prototype.makeViewportSmall = function() {
      return $('.horizontal-carousel').css({
        'width': '768px',
        'left': "50%",
        'margin-left': "-384px"
      }).addClass('horizontal-carousel-sized');
    };

    Presenter.prototype.makeViewportMedium = function() {
      return $('.horizontal-carousel').css({
        'width': '1024px',
        'left': "50%",
        'margin-left': "-512px"
      }).addClass('horizontal-carousel-sized');
    };

    Presenter.prototype.makeViewportLarge = function() {
      return $('.horizontal-carousel').css({
        'width': '1280px',
        'left': "50%",
        'margin-left': "-640px"
      }).addClass('horizontal-carousel-sized');
    };

    Presenter.prototype.newMenuStatus = function() {
      $('.nav-wrapper').toggleClass('nav-visible');
      if ($('.nav-wrapper').hasClass('nav-visible')) {
        return $('.popover-wrapper .popover').removeClass('popover-visible');
      }
    };

    Presenter.prototype.revealSlideshow = function() {
      $('.throbber').remove();
      return $('.horizontal-carousel').removeClass('horizontal-carousel-hidden');
    };

    Presenter.prototype.newContent = function(opts) {
      opts.presentation.images.alphanumSort();
      $(".main-nav a").removeClass('nav-item-link-active');
      $("#" + opts.presentation.uniqueId).addClass('nav-item-link-active');
      $('#main').html('');
      $('.popover-wrapper-note').remove();
      $('#presentationTmpl').tmpl(opts.presentation).appendTo('#main');
      $('.horizontal-carousel').imagesLoaded(this.revealSlideshow);
      $('#main .slidewrap').carousel({
        slider: '.horizontal-carousel-slider',
        slide: '.horizontal-carousel-slide',
        addPagination: true,
        addNav: true,
        callback: this.pushSlideNo,
        speed: 300
      });
      this.newNote(opts.presentationId);
      if (opts.slideNo) {
        return this.newSlide(opts.slideNo);
      }
    };

    Presenter.prototype.newFrontPage = function() {
      var liveContent, metaData, _i, _len, _ref;
      liveContent = "";
      $('.popover-wrapper-nav .popover').addClass('popover-visible');
      try {
        _ref = presentations["98bf7d8c15784f0a3d63204441e1e2aa"].notes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          metaData = _ref[_i];
          liveContent += metaData.note;
        }
        $('#main').html("<div class='page-border'></div>\n<div class='front-page'>\n	<div class='front-page-wrapper'>\n		<div class='front-page-page'>" + liveContent + "</div>\n	</div>\n</div>");
        $("header a.nav-item-link-active").removeClass('nav-item-link-active');
        return $('#home-button').addClass('nav-item-link-active');
      } catch (err) {
        return console.log(err);
      }
    };

    Presenter.prototype.newSlide = function(slideNo) {
      return $('.carousel-tabs li').eq(slideNo).find('a').attr('aria-selected', 'true').click();
    };

    Presenter.prototype.newNote = function(id) {
      var note, presentation, titleRegEx;
      presentation = presentations[id];
      note = {};
      titleRegEx = new RegExp("(<h1[^>]*>(.*)</h1>)");
      try {
        note.content = presentation.notes[0].note;
        note.title = titleRegEx.exec(note.content);
        note.title = note.title[note.title.length - 1];
      } catch (err) {
        log(err, presentation, "Can't find a text file for the presentation in " + presentation.path);
        note.title = presentation.path;
      }
      $('.popover-wrapper-note').remove();
      if (!$('header .header-icon-note').length) {
        $('header').append('<a class="header-icon header-icon-note ir"></a>');
      }
      $('#noteTmpl').tmpl(note).appendTo('header');
      $('.header-icon-note').click(function(e) {
        e.preventDefault();
        if ($('.popover-wrapper-nav .popover').hasClass('popover-visible')) {
          this.newMenuStatus();
        }
        return $('.popover-wrapper-note .popover').toggleClass('popover-visible');
      });
      return $('.header-icon-close').click(function(e) {
        e.preventDefault();
        return $(this).parent().removeClass('popover-visible');
      });
    };

    Presenter.prototype.generateNav = function() {
      var indexReference, key, note, presentation, processedPresentations, titleRegEx;
      processedPresentations = {
        list: []
      };
      for (key in presentations) {
        if (!__hasProp.call(presentations, key)) continue;
        presentation = presentations[key];
        if (presentation.path) {
          try {
            note = presentation.notes[0].note;
            titleRegEx = new RegExp("(<h1[^>]*>(.*)</h1>)");
            presentation.title = titleRegEx.exec(note);
            presentation.title = presentation.title[presentation.title.length - 1];
          } catch (err) {
            log(err, presentations[key], "Can't find a text file for the presentation in " + presentations[key].path);
            presentation.title = presentation.path;
          }
          presentation.id = key;
          processedPresentations.list.push(presentation);
        }
      }
      indexReference = _.pluck(processedPresentations.list, "title");
      indexReference.alphanumSort();
      processedPresentations.list = _.sortBy(processedPresentations.list, function(myListElement) {
        return _.indexOf(indexReference, myListElement.title);
      });
      return $('#mainNavTmpl').tmpl(processedPresentations).appendTo('body');
    };

    Presenter.prototype.pushSlideNo = function() {
      var index, state;
      state = $.bbq.getState();
      index = $('.carousel-active-slide').index;
      this.status.s = index;
      return $.bbq.pushState({
        s: index
      });
    };

    Presenter.prototype.keyEventHandler = function(e) {
      var currentPresentation, state;
      state = $.bbq.getState();
      currentPresentation = this.status.p;
      switch (e.keyCode) {
        case 39:
        case 13:
        case 32:
        case 34:
          state.s = state.s || 0;
          if (presentations[currentPresentation] && presentations[currentPresentation].images.length - 1 > state.s) {
            state.s++;
            $.bbq.pushState(state);
            event.preventDefault();
          }
          break;
        case 37:
        case 8:
        case 33:
          if (state.s > 0) {
            state.s--;
            $.bbq.pushState(state);
            event.preventDefault();
          }
          break;
      }
    };

    Presenter.prototype.listenForKeyEvents = function() {
      if (document.addEventListener) {
        return document.addEventListener('keydown', this.keyEventHandler, false);
      } else if (document.attachEvent) {
        return document.attachEvent('keydown', this.keyEventHandler);
      }
    };

    Presenter.prototype.router = function(e) {
      var hash, presentation, presentationId, slideNo, viewportSize;
      hash = $.bbq.getState();
      presentationId = hash.p;
      slideNo = hash.s;
      viewportSize = hash.v;
      presentation = presentations[presentationId];
      if (!presentation) {
        this.newFrontPage();
      } else if (!this.status.p) {
        this.newContent({
          presentation: presentation,
          presentationId: presentationId,
          slideNo: slideNo
        });
      } else if (presentation && presentationId !== this.status.p) {
        $(window).unbind('hashchange', this.router);
        $.bbq.pushState({
          s: 0
        });
        $(window).bind('hashchange', this.router);
        this.newContent({
          presentation: presentation,
          presentationId: presentationId,
          slideNo: 0
        });
      } else if (slideNo !== this.status.s) {
        this.newSlide(slideNo);
      } else {
        log('saw nothing', hash, this.status);
      }
      if (viewportSize !== this.status.v && typeof viewportSize !== "undefined") {
        this["makeViewport" + viewportSize]();
      }
      return this.status = hash;
    };

    return Presenter;

  })();

  presenter = new Presenter();

  $(document).ready(function() {
    var img1;
    if (document.images) {
      img1 = new Image();
      img1.src = "_/img/ajax-loader.gif";
    }
    return presenter.init();
  });

}).call(this);
